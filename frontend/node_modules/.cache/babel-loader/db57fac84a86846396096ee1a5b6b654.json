{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { toast } from \"react-toastify\";\nconst initialState = {\n  //if items exist in local storage then include them in state\n  cartItems: localStorage.getItem(\"cartItems\") ? JSON.parse(localStorage.getItem(\"cartItems\")) : [],\n  cartTotalQuantity: 0,\n  cartTotalAmount: 0\n};\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState,\n  reducers: {\n    addToCart(state, action) {\n      // check whether a product exists in cart items already\n      const itemIndex = state.cartItems.findIndex(item => item.id === action.payload.id);\n\n      if (itemIndex >= 0) {\n        state.cartItems[itemIndex].cartQuantity += 1;\n        toast.info(`Another ${state.cartItems[itemIndex].name} has been added to cart`, {\n          position: \"bottom-left\"\n        }); // state.cartItems.findIndex((item) => item.id === action.payload.id);\n      } else {\n        const tempProduct = { ...action.payload,\n          cartQuantity: 1\n        };\n        state.cartItems.push(tempProduct);\n        toast.success(`${action.payload.name} added to cart`, {\n          position: \"bottom-left\"\n        }); // //action.payload is the product\n        // state.cartItems.push(action.payload);\n      } //add item to local storage\n\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    // update cart item state\n    removeFromCart(state, action) {\n      const nextCartItems = state.cartItems.filter( // return items that are not equal, will not be included in array\n      cartItem => cartItem.id !== action.payload.id);\n      state.cartItems = nextCartItems;\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n      toast.error(`${action.payload.name} removed from cart`, {\n        position: \"bottom-left\"\n      });\n    },\n\n    // decrease cart quantity\n    decreaseCart(state, action) {\n      const itemIndex = state.cartItems.findIndex(cartItem => cartItem.id === action.payload.id); // check if quantity is greater than 1\n\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\n        state.cartItems[itemIndex].cartQuantity -= 1;\n        toast.error(`${action.payload.name} removed from cart`, {\n          position: \"bottom-left\"\n        });\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\n        const nextCartItems = state.cartItems.filter(cartItem => cartItem.id !== action.payload.id);\n        state.cartItems = nextCartItems;\n        toast.error(`${action.payload.name} removed from cart`, {\n          position: \"bottom-left\"\n        });\n      }\n\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    clearCart(state, action) {\n      state.cartItems = [];\n      toast.error(`Your cart is empty`, {\n        position: \"bottom-left\"\n      });\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n\n    getTotals(state, action) {\n      let {\n        total,\n        quantity\n      } = state.cartItems.reduce((cartTotal, cartItem) => {\n        const {\n          price,\n          cartQuantity\n        } = cartItem;\n        const itemTotal = price * cartQuantity;\n        cartTotal.total += itemTotal;\n        cartTotal.quantity += cartQuantity;\n        return cartTotal;\n      }, {\n        total: 0,\n        quantity: 0\n      });\n      state.cartTotalQuantity = quantity;\n      state.cartTotalAmount = total;\n    }\n\n  }\n});\nexport const {\n  addToCart,\n  removeFromCart,\n  decreaseCart,\n  clearCart,\n  getTotals\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","toast","initialState","cartItems","localStorage","getItem","JSON","parse","cartTotalQuantity","cartTotalAmount","cartSlice","name","reducers","addToCart","state","action","itemIndex","findIndex","item","id","payload","cartQuantity","info","position","tempProduct","push","success","setItem","stringify","removeFromCart","nextCartItems","filter","cartItem","error","decreaseCart","clearCart","getTotals","total","quantity","reduce","cartTotal","price","itemTotal","actions","reducer"],"sources":["C:/Users/ciosa/OneDrive/Desktop/Coding/reduxshoppingcart/frontend/src/features/cartSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst initialState = {\r\n  //if items exist in local storage then include them in state\r\n  cartItems: localStorage.getItem(\"cartItems\")\r\n    ? JSON.parse(localStorage.getItem(\"cartItems\"))\r\n    : [],\r\n  cartTotalQuantity: 0,\r\n  cartTotalAmount: 0,\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {\r\n    addToCart(state, action) {\r\n      // check whether a product exists in cart items already\r\n      const itemIndex = state.cartItems.findIndex(\r\n        (item) => item.id === action.payload.id\r\n      );\r\n      if (itemIndex >= 0) {\r\n        state.cartItems[itemIndex].cartQuantity += 1;\r\n        toast.info(\r\n          `Another ${state.cartItems[itemIndex].name} has been added to cart`,\r\n          {\r\n            position: \"bottom-left\",\r\n          }\r\n        );\r\n        // state.cartItems.findIndex((item) => item.id === action.payload.id);\r\n      } else {\r\n        const tempProduct = { ...action.payload, cartQuantity: 1 };\r\n        state.cartItems.push(tempProduct);\r\n        toast.success(`${action.payload.name} added to cart`, {\r\n          position: \"bottom-left\",\r\n        });\r\n        // //action.payload is the product\r\n        // state.cartItems.push(action.payload);\r\n      }\r\n      //add item to local storage\r\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\r\n    },\r\n    // update cart item state\r\n    removeFromCart(state, action) {\r\n      const nextCartItems = state.cartItems.filter(\r\n        // return items that are not equal, will not be included in array\r\n        (cartItem) => cartItem.id !== action.payload.id\r\n      );\r\n      state.cartItems = nextCartItems;\r\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\r\n      toast.error(`${action.payload.name} removed from cart`, {\r\n        position: \"bottom-left\",\r\n      });\r\n    },\r\n    // decrease cart quantity\r\n    decreaseCart(state, action) {\r\n      const itemIndex = state.cartItems.findIndex(\r\n        (cartItem) => cartItem.id === action.payload.id\r\n      );\r\n      // check if quantity is greater than 1\r\n      if (state.cartItems[itemIndex].cartQuantity > 1) {\r\n        state.cartItems[itemIndex].cartQuantity -= 1;\r\n        toast.error(`${action.payload.name} removed from cart`, {\r\n          position: \"bottom-left\",\r\n        });\r\n      } else if (state.cartItems[itemIndex].cartQuantity === 1) {\r\n        const nextCartItems = state.cartItems.filter(\r\n          (cartItem) => cartItem.id !== action.payload.id\r\n        );\r\n        state.cartItems = nextCartItems;\r\n        toast.error(`${action.payload.name} removed from cart`, {\r\n          position: \"bottom-left\",\r\n        });\r\n      }\r\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\r\n    },\r\n\r\n    clearCart(state, action) {\r\n      state.cartItems = [];\r\n      toast.error(`Your cart is empty`, {\r\n        position: \"bottom-left\",\r\n      });\r\n      localStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\r\n    },\r\n    getTotals(state, action) {\r\n      let { total, quantity } = state.cartItems.reduce(\r\n        (cartTotal, cartItem) => {\r\n          const { price, cartQuantity } = cartItem;\r\n          const itemTotal = price * cartQuantity;\r\n\r\n          cartTotal.total += itemTotal;\r\n          cartTotal.quantity += cartQuantity;\r\n\r\n          return cartTotal;\r\n        },\r\n        {\r\n          total: 0,\r\n          quantity: 0,\r\n        }\r\n      );\r\n\r\n      state.cartTotalQuantity = quantity;\r\n      state.cartTotalAmount = total;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addToCart, removeFromCart, decreaseCart, clearCart, getTotals } =\r\n  cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}